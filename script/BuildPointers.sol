// SPDX-License-Identifier: CAL
pragma solidity =0.8.25;

import {Script} from "forge-std/Script.sol";
import {RainterpreterNPE2} from "src/concrete/RainterpreterNPE2.sol";

contract BuildPointers is Script {
    function run() external {
        RainterpreterNPE2 interpreter = new RainterpreterNPE2();
        bytes memory pointers = interpreter.functionPointers();

        string memory path = "src/generated/RainterpreterNPE2.pointers.sol";
        string memory hexString = vm.toString(pointers);
        assembly ("memory-safe") {
            // Remove the leading 0x
            let newHexString := add(hexString, 2)
            mstore(newHexString, sub(mload(hexString), 2))
            hexString := newHexString
        }

        bytes32 interpreterBytecodeHash;
        assembly {
            interpreterBytecodeHash := extcodehash(interpreter)
        }
        string memory interpreterBytecodeHashString = vm.toString(interpreterBytecodeHash);

        if (vm.exists(path)) {
            vm.removeFile(path);
        }
        vm.writeFile(path,
        string.concat(
            "// THIS FILE IS AUTOGENERATED BY ./script/BuildPointers.sol\n\n",
            "// This file is committed to the repository because there is a circular\n"
            "// dependency between the interpreter and the pointers file. The interpreter\n"
            "// needs the pointers file to exist so that it can compile, and the pointers\n"
            "// file needs the interpreter to exist so that it can be compiled.\n\n",
            "// SPDX-License-Identifier: CAL\n",
            "pragma solidity =0.8.25;\n\n",
            "/// @dev Hash of the known interpreter bytecode.\n",
            "bytes32 constant INTERPRETER_BYTECODE_HASH = bytes32(",
            interpreterBytecodeHashString,
            ");\n\n",
            "/// @dev The function pointers known to the interpreter for dynamic dispatch.\n",
            "/// By setting these as a constant they can be inlined into the interpreter\n",
            "/// and loaded at eval time for very low gas (~100) due to the compiler\n",
            "/// optimising it to a single `codecopy` to build the in memory bytes array.\n",
            "bytes constant OPCODE_FUNCTION_POINTERS = hex\"",
            hexString,
            "\";\n"
        ));
    }
}
