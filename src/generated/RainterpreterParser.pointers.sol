// THIS FILE IS AUTOGENERATED BY ./script/BuildPointers.sol

// This file is committed to the repository because there is a circular
// dependency between the contract and its pointers file. The contract
// needs the pointers file to exist so that it can compile, and the pointers
// file needs the contract to exist so that it can be compiled.

// SPDX-License-Identifier: LicenseRef-DCL-1.0
// SPDX-FileCopyrightText: Copyright (c) 2020 Rain Open Source Software Ltd
pragma solidity =0.8.25;

/// @dev Hash of the known bytecode.
bytes32 constant BYTECODE_HASH = bytes32(0x77d97ce1ca9d1a96d301f3f9d015b9ab18e98f52419e87dbc2238845e0ca5a3c);

/// @dev The parse meta that is used to lookup word definitions.
/// The structure of the parse meta is:
/// - 1 byte: The depth of the bloom filters
/// - 1 byte: The hashing seed
/// - The bloom filters, each is 32 bytes long, one for each build depth.
/// - All the items for each word, each is 4 bytes long. Each item's first byte
///   is its opcode index, the remaining 3 bytes are the word fingerprint.
/// To do a lookup, the word is hashed with the seed, then the first byte of the
/// hash is compared against the bloom filter. If there is a hit then we count
/// the number of 1 bits in the bloom filter up to this item's 1 bit. We then
/// treat this a the index of the item in the items array. We then compare the
/// word fingerprint against the fingerprint of the item at this index. If the
/// fingerprints equal then we have a match, else we increment the seed and try
/// again with the next bloom filter, offsetting all the indexes by the total
/// bit count of the previous bloom filter. If we reach the end of the bloom
/// filters then we have a miss.
bytes constant PARSE_META =
    hex"010e000088000000102c00000c8880800d24a0148109008880010000140554a010000d1dbb6302525f2211999fd50f6c01da1771b5110a2139801969a80f00a4ed3f26ba92e12248361e2528c11e089ebd5e07e235981ab5fc9e23d9ace210e92356153994150b7dfb1509bb6451066c83bf205797780c4960e303fa47a905e82f0c1c4efea02124d7751ebfd64114d6a860125832fd1bb8491f1fbe2c7c01d81c842462708d0efdd5d8132466661647b9490477ee1818e0ddd31d3436fb";

/// @dev The build depth of the parser meta.

uint8 constant PARSE_META_BUILD_DEPTH = 2;

/// @dev Every two bytes is a function pointer for an operand handler.
/// These positional indexes all map to the same indexes looked up in the parse
/// meta.
bytes constant OPERAND_HANDLER_FUNCTION_POINTERS =
    hex"19d219d219d21aa71bbe1bbe1bbe1aa71aa719d219d219d21bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe1bbe19d21bbe1bbe";

/// @dev Every two bytes is a function pointer for a literal parser.
/// Literal dispatches are determined by the first byte(s) of the literal
/// rather than a full word lookup, and are done with simple conditional
/// jumps as the possibilities are limited compared to the number of words we
/// have.
bytes constant LITERAL_PARSER_FUNCTION_POINTERS = hex"151a174c178f182d";
