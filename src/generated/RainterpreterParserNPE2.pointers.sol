// THIS FILE IS AUTOGENERATED BY ./script/BuildPointers.sol

// This file is committed to the repository because there is a circular
// dependency between the contract and its pointers file. The contract
// needs the pointers file to exist so that it can compile, and the pointers
// file needs the contract to exist so that it can be compiled.

// SPDX-License-Identifier: CAL
pragma solidity =0.8.25;

/// @dev Hash of the known bytecode.
bytes32 constant BYTECODE_HASH = bytes32(0xf67f16c461ce2a0312e9eafe7b66c8461847adefe22f11f87cf397368394da33);

/// @dev Encodes the parser meta that is used to lookup word definitions.
/// The structure of the parser meta is:
/// - 1 byte: The depth of the bloom filters
/// - 1 byte: The hashing seed
/// - The bloom filters, each is 32 bytes long, one for each build depth.
/// - All the items for each word, each is 4 bytes long. Each item's first byte
///   is its opcode index, the remaining 3 bytes are the word fingerprint.
/// To do a lookup, the word is hashed with the seed, then the first byte of the
/// hash is compared against the bloom filter. If there is a hit then we count
/// the number of 1 bits in the bloom filter up to this item's 1 bit. We then
/// treat this a the index of the item in the items array. We then compare the
/// word fingerprint against the fingerprint of the item at this index. If the
/// fingerprints equal then we have a match, else we increment the seed and try
/// again with the next bloom filter, offsetting all the indexes by the total
/// bit count of the previous bloom filter. If we reach the end of the bloom
/// filters then we have a miss.
bytes constant PARSE_META =
    hex"027d02482901b41410193601380a408092011324604290a201223062960051044a8900000000000000000800000008000000100000000000000000000000000000000039af1e5833ee31ff1b4c426227d999cd14d454a617378a702387204a18ca041510bfc04d2cac003405382451268fb9fe32e745fd29dbc3c52a415aff3a530a92388e9cbd314c3a173d402c5804ea67600a2aa235164d56371905a76540dd323d0cd5a68e1f3f2270412237032080073412d4a5b3119bd3ec068483ae422e554c37f6dc5d24f0c0a634fef45a2fa6feff1d9677b930db58d43e742e374378613501d4fa88030cae020885d59f2d766a3e158413022b67b4531a4070aa2140ab0f255a53d84592737c355bcbd00ff7e3283f5a200713686f5c3bbd3f5f024641b909f14a300b1ec71b28a38323369552b91e792a60445d96b7477b8cf22253f8d14633bccc0d403ded0791b7eb002ddffc0e1abd702ee98c713cc04abd1c4507bb";

/// @dev The build depth of the parser meta.
uint8 constant PARSE_META_BUILD_DEPTH = 2;

/// @dev Every two bytes is a function pointer for an operand handler.
/// These positional indexes all map to the same indexes looked up in the parse
/// meta.
bytes constant OPERAND_HANDLER_FUNCTION_POINTERS =
    hex"18e818e818e8194d19c619c619c6194d194d18e818e818e819c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c619c61a0b19c61add1a0b19c61add19c619c618e81b4619c619c6";

/// @dev Every two bytes is a function pointer for a literal parser.
/// Literal dispatches are determined by the first byte(s) of the literal
/// rather than a full word lookup, and are done with simple conditional
/// jumps as the possibilities are limited compared to the number of words we
/// have.
bytes constant LITERAL_PARSER_FUNCTION_POINTERS = hex"0f5e1226162d1707";
