// THIS FILE IS AUTOGENERATED BY ./script/BuildPointers.sol

// This file is committed to the repository because there is a circular
// dependency between the contract and its pointers file. The contract
// needs the pointers file to exist so that it can compile, and the pointers
// file needs the contract to exist so that it can be compiled.

// SPDX-License-Identifier: CAL
pragma solidity =0.8.25;

/// @dev Hash of the known bytecode.
bytes32 constant BYTECODE_HASH = bytes32(0x14eeb49b9a92ef8720b3a881c499c056f8b3cfd80380ecc935ce167b7010fbd0);

/// @dev Encodes the parser meta that is used to lookup word definitions.
/// The structure of the parser meta is:
/// - 1 byte: The depth of the bloom filters
/// - 1 byte: The hashing seed
/// - The bloom filters, each is 32 bytes long, one for each build depth.
/// - All the items for each word, each is 4 bytes long. Each item's first byte
///   is its opcode index, the remaining 3 bytes are the word fingerprint.
/// To do a lookup, the word is hashed with the seed, then the first byte of the
/// hash is compared against the bloom filter. If there is a hit then we count
/// the number of 1 bits in the bloom filter up to this item's 1 bit. We then
/// treat this a the index of the item in the items array. We then compare the
/// word fingerprint against the fingerprint of the item at this index. If the
/// fingerprints equal then we have a match, else we increment the seed and try
/// again with the next bloom filter, offsetting all the indexes by the total
/// bit count of the previous bloom filter. If we reach the end of the bloom
/// filters then we have a miss.
bytes constant PARSE_META =
    hex"027d02482901b41410193601380a408092011324604290a201223062960011044a8900000000000000000800000008000000100000000000000000000000000000000038af1e5832ee31ff1b4c426227d999cd14d454a617378a702387204a18ca041510bfc04d05382451268fb9fe31e745fd29dbc3c52a415aff39530a92378e9cbd304c3a173c402c5804ea67600a2aa235164d56371905a7653fdd323d0cd5a68e1f3f2270402237032080073412d4a5b3119bd3ec068483ae412e554c36f6dc5d24f0c0a633fef45a2ea6feff1d9677b92fdb58d43d742e374278613501d4fa88030cae020885d59f2c766a3e158413022b67b4531a4070aa2140ab0f255a53d84492737c345bcbd00ff7e3283e5a200713686f5c3abd3f5f024641b909f14a300b1ec71b28a38323359552b91e792a60435d96b7467b8cf22253f8d14533bccc0d403ded0791b7eb002ddffc0e1abd702de98c713bc04abd1c4507bb";

/// @dev The build depth of the parser meta.
uint8 constant PARSE_META_BUILD_DEPTH = 2;

/// @dev Every two bytes is a function pointer for an operand handler.
/// These positional indexes all map to the same indexes looked up in the parse
/// meta.
bytes constant OPERAND_HANDLER_FUNCTION_POINTERS =
    hex"18e018e018e0194519be19be19be1945194518e018e018e019be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be19be1a0319be1ad51a0319be1ad519be19be18e01b3e19be19be";

/// @dev Every two bytes is a function pointer for a literal parser.
/// Literal dispatches are determined by the first byte(s) of the literal
/// rather than a full word lookup, and are done with simple conditional
/// jumps as the possibilities are limited compared to the number of words we
/// have.
bytes constant LITERAL_PARSER_FUNCTION_POINTERS = hex"0f56121e162516ff";
